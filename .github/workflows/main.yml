name: PullRequest Pipeline

on:
  pull_request:
    paths:
      - 'moduleA/**'
      - 'moduleB/**'

jobs:
  verification:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Detect changed modules
        id: detect-modules
        run: |
          # PR의 base 브랜치와 비교할 기준 커밋 찾기
          git fetch --prune --unshallow
          BASE_COMMIT=$(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD)
          
          # 변경된 파일 감지
          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT)
          echo "Changed files: $CHANGED_FILES"

          # 변경된 모듈에 따라 테스트 대상 설정
          MODULES_TO_TEST=""
          if echo "$CHANGED_FILES" | grep -q '^moduleA/'; then
            MODULES_TO_TEST="$MODULES_TO_TEST :moduleA:test"
          fi
          if echo "$CHANGED_FILES" | grep -q '^moduleB/'; then
            MODULES_TO_TEST="$MODULES_TO_TEST :moduleB:test"
          fi

          # 테스트 대상 모듈 출력
          echo "Modules to test: $MODULES_TO_TEST"

          # 테스트 대상 모듈을 GitHub Actions의 outputs에 설정
          echo "::set-output name=modules_to_test::$MODULES_TO_TEST"

      - name: Build and Test
        if: ${{ steps.detect-modules.outputs.modules_to_test != '' }}
        run: ./gradlew ${{ steps.detect-modules.outputs.modules_to_test }} --stacktrace

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/*.xml'
