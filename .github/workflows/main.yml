name: PullRequest Pipeline

on:
  pull_request:
    paths:
      - 'moduleA/**'
      - 'moduleB/**'

jobs:
  verification:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Detect changed modules
        id: detect-modules
        run: |
          # PR의 base 브랜치와 비교할 기준 커밋 찾기
          git fetch --prune --unshallow
          BASE_COMMIT=$(git merge-base origin/${{ github.event.pull_request.base.ref }} HEAD)
          
          # 변경된 파일 감지
          CHANGED_FILES=$(git diff --name-only $BASE_COMMIT)
          echo "Changed files: $CHANGED_FILES"

          # 변경된 모듈에 따라 테스트 대상 설정
          MODULE_PATH=""
          if echo "$CHANGED_FILES" | grep -q '^moduleA/'; then
            MODULE_PATH="moduleA"
          fi
          if echo "$CHANGED_FILES" | grep -q '^moduleB/'; then
            MODULE_PATH="moduleB"
          fi

          # 모듈 경로 출력 및 GitHub Actions output 설정
          echo "Module path to test: $MODULE_PATH"
          echo "::set-output name=module_path::$MODULE_PATH"

      - name: Build with Gradle
        if: ${{ steps.detect-modules.outputs.module_path != '' }}
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_USER_HOME: ./.gradle-home
        with:
          gradle-version: wrapper
          cache-read-only: true
          arguments: |
            -p ${{ steps.detect-modules.outputs.module_path }} test
            --stacktrace

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/*.xml'
